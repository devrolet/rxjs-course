RXJS NOTES 

Official RxJS documentation: https://reactivex.io 

What is a stream?

This involves a stream of values. Which can be one stream or multiple streams depending on the code. Users can use examples such as the ones below to get an understanding of how streams work.

    // This stream emits a value every time the user clicks anywhere on the page.
    document.addEventListener('click', evt => console.log(evt));

    // 11-16 Sets a counter then the setInterval method logs the counter to the console. The counter then iterates by 1 every 1 second. Do not do this in practice. It'll create an infinite loop and continue logging values in perpetuity.
    let counter = 0; 

    setInterval(() => {
        console.log(counter);
        counter++;
    }, 1000);

    // Set timeout will emit a value after a set amoutn of time and cut off. In this example the console will wait 3 seconds and then it'll log the word finished...
    setTimeout(() => {
        console.log('finished...');
    }, 3000);


    What is rxjs? What problem does it solve?

    RXJS = Reactive Xtensions for JavaScript
    RXJS is meant to combine multiple streams of values effectively without creating "callback hell".

    What is an RXJS Observable?

    Use $ at the of a variable that is an Observable. i.e. const interval$ = interval(1000);
    Simply declaring the Observable will not activate it. It is simply a definition for how the observable will behave. 
    An observable will become a stream only after you subscribe to it using the .subscribe method

    interval$.subscribe(val => console.log(`Stream 1 ${val}`));


Observables only either emits values, errors out, or completes.
Never call .next on an already completed observable, this breaks the observable contract.

OPERATORS

MAP - transform the items emitted by an Observable by applying a function to each item.
https://reactivex.io/documentation/operators/map.html

Give everything a type when using map operators.

CONCATMAP - Maps each value to an Observable, then flattens all of these inner Observables using concatAll 
https://reactivex.io/documentation/operators/flatmap.html


MERGEMAP - Maps each value to an Observable, then flattens all of these inner Observables using mergeAll.
https://rxjs.dev/api/index/function/mergeMap

